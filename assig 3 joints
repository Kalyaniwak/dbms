        GROUP-A 
                                                            Assignment No.-3 
 
Title: SQL Queries - all types of Join, Sub-Query and View:  
Write at least 10 SQL queries for suitable database application using SQL DML statements. 
 
gescoe@gescoe-OptiPlex-3010:~$ mysql -h 192.168.2.232 -u TEA13 -p 
Enter password:  
Welcome to the MySQL monitor.  Commands end with ; or \g. 
Your MySQL connection id is 11 
Server version: 5.6.41 MySQL Community Server (GPL) 
 
Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. 
 
Oracle is a registered trademark of Oracle Corporation and/or its 
affiliates. Other names may be trademarks of their respective 
owners. 
 
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. 
 
mysql> use Shravani22; 
Reading table information for completion of table and column names 
You can turn off this feature to get a quicker startup with -A 
 
Database changed 
Solution: 
I. Create following table 
Table Name: Customer 
Table Column Name: CustomerID, Name,Email 
mysql> create table Customer(CustomerID int primary key auto_increment,Name varchar(20),Email 
varchar(30)); 
Query OK, 0 rows affected (0.29 sec) 
mysql> desc Customer; 
+------------+-------------+------+-----+---------+----------------+ 
| Field     
 | Type       
 | Null | Key | Default | Extra         
+------------+-------------+------+-----+---------+----------------+ 
 | 
| CustomerID | int(11)     | NO   | PRI | NULL    | auto_increment | 
| Name      
| Email     
 | varchar(20) | YES  |    
 | varchar(30) | YES  |    
 | NULL    |               
 | NULL    |                
+------------+-------------+------+-----+---------+----------------+ 
3 rows in set (0.05 sec) 
II. Insert Three Records 
mysql> insert into 
 | 
| 
Customer(Name,Email)values("Shravani","shravani@example.com"),("Punam","punam@example.com")
 ,("Liya","liya@example.com"); 
Query OK, 3 rows affected (0.04 sec) 
Records: 3  Duplicates: 0  Warnings: 0 
mysql> select * from Customer; 
+------------+-----------+-----------------------+ 
| CustomerID | Name      
| Email                
 | 
+------------+-----------+-----------------------+ 
|         
|         
|         
 1 | Shravani  | shravani@example.com  | 
 2 | Punam     | punam@example.com     | 
 3 | Liya      
| liya@example.com      | 
+------------+-----------+-----------------------+ 
3 rows in set (0.00 sec) 
III. Create following table 
Table Name: Order 
Table Column Name: OrderID,CustomerID, ProductID,OrderDate 
mysql> create table Orders(OrderID int primary key auto_increment,CustomerID int,ProductID 
int,OrderDate date not null);  
Query OK, 0 rows affected (0.42 sec) 
mysql> desc Orders; 
+------------+---------+------+-----+---------+----------------+ 
| Field     
 | Type    | Null | Key | Default | Extra         
+------------+---------+------+-----+---------+----------------+ 
 | 
| OrderID    | int(11) | NO   | PRI | NULL    | auto_increment | 
| CustomerID | int(11) | YES  |    
 | NULL    |                
| ProductID  | int(11) | YES  |     | NULL    |               
| OrderDate  | date    | NO   |     | NULL    |                
+------------+---------+------+-----+---------+----------------+ 
4 rows in set (0.00 sec) 
IV. Insert Four Records 
| 
 | 
| 
mysql> insert into Orders(CustomerID,ProductID,OrderDate)values(1,101,2024-01-15),(2,102,2024-02
20),(1,103,2024-03-25),(4,104,2024-04-30); 
Query OK, 4 rows affected, 4 warnings (0.03 sec) 
Records: 4  Duplicates: 0  Warnings: 4 
mysql> select * from Orders; 
+---------+------------+-----------+------------+ 
| OrderID | CustomerID | ProductID | OrderDate  | 
+---------+------------+-----------+------------+ 
|      
|      
|      
|      
 1 |          
 2 |          
 3 |          
 4 |          
1 |      
2 |      
1 |      
4 |      
 101 | 0000-00-00 | 
 102 | 0000-00-00 | 
 103 | 0000-00-00 | 
 104 | 0000-00-00 | 
+---------+------------+-----------+------------+ 
4 rows in set (0.00 sec) 
mysql> update Orders set OrderDate="2024-01-15" where ProductID=101; 
Query OK, 1 row affected (0.04 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> select * from Orders; 
+---------+------------+-----------+------------+ 
| OrderID | CustomerID | ProductID | OrderDate  | 
+---------+------------+-----------+------------+ 
|      
|      
|      
|      
 1 |          
 2 |          
 3 |          
 4 |          
1 |      
2 |      
1 |      
4 |      
 101 | 2024-01-15 | 
 102 | 0000-00-00 | 
 103 | 0000-00-00 | 
 104 | 0000-00-00 | 
+---------+------------+-----------+------------+ 
4 rows in set (0.00 sec) 
mysql> update Orders set OrderDate="2024-02-20" where ProductID=102; 
Query OK, 1 row affected (0.04 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> update Orders set OrderDate="2024-03-25" where ProductID=103; 
Query OK, 1 row affected (0.04 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> update Orders set OrderDate="2024-04-30" where ProductID=104; 
Query OK, 1 row affected (0.04 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> select * from Orders; 
+---------+------------+-----------+------------+ 
| OrderID | CustomerID | ProductID | OrderDate  | 
+---------+------------+-----------+------------+ 
|      
|      
|      
|      
 1 |          
 2 |          
 3 |          
 4 |          
1 |      
2 |      
1 |      
4 |      
 101 | 2024-01-15 | 
 102 | 2024-02-20 | 
 103 | 2024-03-25 | 
 104 | 2024-04-30 | 
+---------+------------+-----------+------------+ 
4 rows in set (0.00 sec) 
V. INNER JOIN 
Returns records that have matching values in both tables. 
mysql> select Customer.CustomerID,Customer.Name,Orders.OrderID,Orders.OrderDate from Customer 
inner join Orders on Customer.CustomerID=Orders.CustomerID; 
+------------+-----------+---------+------------+ 
| CustomerID | Name      
| OrderID | OrderDate  | 
+------------+-----------+---------+------------+ 
|         
|         
|         
 1 | Shravani  |      
 1 | 2024-01-15 | 
 2 | Punam     |       2 | 2024-02-20 | 
 1 | Shravani  |      
 3 | 2024-03-25 | 
+------------+-----------+---------+------------+ 
3 rows in set (0.00 sec) 
VI. LEFT JOIN (LEFT OUTER JOIN) 
Returns all records from the left table and the matched records from the right table. Unmatched 
records from the right table will contain null. 
mysql> select Customer.CustomerID,Customer.Name,Orders.OrderID,Orders.OrderDate from Customer 
left join Orders on Customer.CustomerID=Orders.CustomerID; 
+------------+-----------+---------+------------+ 
| CustomerID | Name      
| OrderID | OrderDate  | 
+------------+-----------+---------+------------+ 
|         
|         
|         
|         
 1 | Shravani  |      
 1 | 2024-01-15 | 
 2 | Punam     |       2 | 2024-02-20 | 
 1 | Shravani  |      
 3 | Liya      
 3 | 2024-03-25 | 
|    NULL | NULL       | 
+------------+-----------+---------+------------+ 
4 rows in set (0.00 sec) 
VII. RIGHT JOIN (RIGHT OUTER JOIN) 
Returns all records from the right table and the matched records from the left table. Unmatched 
records from the left table will contain null. 
mysql> select Customer.CustomerID,Customer.Name,Orders.OrderID,Orders.OrderDate from Customer 
right join Orders on Customer.CustomerID=Orders.CustomerID; 
+------------+-----------+---------+------------+ 
| CustomerID | Name      
| OrderID | OrderDate  | 
+------------+-----------+---------+------------+ 
|         
|         
|         
|      
 1 | Shravani  |      
 1 | Shravani  |      
 1 | 2024-01-15 | 
 3 | 2024-03-25 | 
 2 | Punam     |       2 | 2024-02-20 | 
 NULL | NULL     
 |       
4 | 2024-04-30 | 
+------------+-----------+---------+------------+ 
4 rows in set (0.00 sec) 
VIII. CROSS JOIN 
Returns the Cartesian product of the two tables, i.e., all possible combinations of rows. 
mysql> select Customer.CustomerID,Customer.Name,Orders.OrderID,Orders.OrderDate from Customer 
cross join Orders; 
+------------+-----------+---------+------------+ 
| CustomerID | Name      
| OrderID | OrderDate  | 
+------------+-----------+---------+------------+ 
|         
|         
|         
|         
|         
|         
|         
|         
 1 | Shravani  |      
 1 | 2024-01-15 | 
 2 | Punam     |       1 | 2024-01-15 | 
 3 | Liya      
|       
 1 | Shravani  |      
1 | 2024-01-15 | 
 2 | 2024-02-20 | 
 2 | Punam     |       2 | 2024-02-20 | 
 3 | Liya      
|       
 1 | Shravani  |      
2 | 2024-02-20 | 
 3 | 2024-03-25 | 
 2 | Punam     |       3 | 2024-03-25 | 
|         
 3 | Liya      
|       
3 | 2024-03-25 | 
|         
|         
|         
 1 | Shravani  |      
 4 | 2024-04-30 | 
 2 | Punam     |       4 | 2024-04-30 | 
 3 | Liya      
|       
4 | 2024-04-30 | 
+------------+-----------+---------+------------+ 
12 rows in set (0.00 sec) 
IX. SELF JOIN 
A self join is a regular join but the table is joined with itself. 
mysql> select A.CustomerID as CustomerID_A,A.Name as Name_A,B.CustomerID as 
CustomerID_B,B.Name as Name_B from Customer A,Customer B where A.CustomerID <> B.CustomerID; 
+--------------+-----------+--------------+-----------+ 
| CustomerID_A | Name_A    | CustomerID_B | Name_B    | 
+--------------+-----------+--------------+-----------+ 
|            
|            
|            
|            
|            
|            
2 | Punam     |           
3 | Liya      
|            
1 | Shravani  |           
3 | Liya      
|            
1 | Shravani  |           
2 | Punam     |           
 1 | Shravani  | 
1 | Shravani  | 
 2 | Punam     | 
2 | Punam     | 
 3 | Liya     
 3 | Liya     
 | 
 | 
+--------------+-----------+--------------+-----------+ 
6 rows in set (0.00 sec) 
I. Create following table 
Table Name: student 
Table Column Name: Rollno,Name,Marks,Branch 
mysql> create table student(Roll_no int primary key auto_increment,Name varchar(20),Marks int,Branch 
varchar(15)); 
Query OK, 0 rows affected (0.28 sec) 
mysql> desc student; 
+---------+-------------+------+-----+---------+----------------+ 
| Field   | Type        
| Null | Key | Default | Extra         
+---------+-------------+------+-----+---------+----------------+ 
 | 
| Roll_no | int(11)     | NO   | PRI | NULL    | auto_increment | 
| Name    | varchar(20) | YES  |     | NULL    |                
| Marks   | int(11)     | YES  |     | NULL    |                
| Branch  | varchar(15) | YES  |    
 | NULL    |                
+---------+-------------+------+-----+---------+----------------+ 
4 rows in set (0.00 sec) 
II. Insert Four Records 
| 
| 
| 
mysql> insert into student(Name,Marks,Branch)values("Shravani",90,"computer"); 
Query OK, 1 row affected (0.06 sec) 
mysql> insert into student(Name,Marks,Branch)values("Punam",95,"computer"); 
Query OK, 1 row affected (0.06 sec) 
mysql> insert into student(Name,Marks,Branch)values("Liya",85,"computer"); 
Query OK, 1 row affected (0.05 sec) 
mysql> insert into student(Name,Marks,Branch)values("Punit",96,"computer"); 
Query OK, 1 row affected (0.03 sec) 
mysql> select * from student; 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
|      
|      
|      
 1 | Shravani  |    90 | computer | 
 2 | Punam     |    95 | computer | 
 3 | Liya     
 4 | Punit    
 |   
 |    
 85 | computer | 
96 | computer | 
+---------+-----------+-------+----------+ 
4 rows in set (0.00 sec) 
III. Display Student Having Marks Below 90 
mysql> select * from student where Marks<90; 
+---------+------+-------+----------+ 
| Roll_no | Name | Marks | Branch   | 
+---------+------+-------+----------+ 
|      
 3 | Liya |    85 | computer | 
+---------+------+-------+----------+ 
1 row in set (0.00 sec) 
IV. Display Student Having Marks above 95 
mysql> select * from student where Marks>95; 
+---------+---------+-------+----------+ 
| Roll_no | Name    | Marks | Branch   | 
+---------+---------+-------+----------+ 
|      
 4 | Punit   |    96 | computer | 
+---------+---------+-------+----------+ 
1 row in set (0.00 sec) 
V. Display Student Having Marks equal to 90 and name is 'Shravani'; 
mysql> select * from student where Marks=90 and Name='Shravani'; 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
 1 | Shravani  |    90 | computer | 
+---------+-----------+-------+----------+ 
1 row in set (0.00 sec) 
VII. Change Student Branch Computer to IT whose name is Punit 
mysql> update student set Branch="IT" where Name="Punit"; 
Query OK, 1 row affected (0.04 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> select * from student; 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
|      
|      
|      
 1 | Shravani  |    90 | computer | 
 2 | Punam     |    95 | computer | 
 3 | Liya     
 4 | Punit    
 |   
 |    
 85 | computer | 
96 | IT      
 | 
+---------+-----------+-------+----------+ 
4 rows in set (0.00 sec) 
VIII. Change Student Branch Computer to AI whose name is Liya 
mysql> update student set Branch="AI" where Name="Liya"; 
Query OK, 1 row affected (0.05 sec) 
Rows matched: 1  Changed: 1  Warnings: 0 
mysql> select * from student; 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
|      
|      
|      
 1 | Shravani  |    90 | computer | 
 2 | Punam     |    95 | computer | 
 3 | Liya     
 4 | Punit    
 |   
 |    
 85 | AI      
96 | IT      
 | 
 | 
+---------+-----------+-------+----------+ 
4 rows in set (0.00 sec) 
IX. Delete Student Whose Marks=95 
mysql> delete from student where Marks=95; 
Query OK, 1 row affected (0.06 sec) 
mysql> select * from student; 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
|      
|      
 1 | Shravani  |    90 | computer | 
 3 | Liya     
 4 | Punit    
 |   
 |    
 85 | AI      
75 | IT      
 | 
 | 
+---------+-----------+-------+----------+ 
3 rows in set (0.00 sec) 
X. Write a function to display student having min marks 
mysql> select min(Marks) from student; 
+------------+ 
| min(Marks) | 
+------------+ 
|         
75 | 
+------------+ 
1 row in set (0.00 sec) 
mysql> select * from student where Marks=(select min(marks) from student); 
+---------+---------+-------+--------+ 
| Roll_no | Name    | Marks | Branch | 
+---------+---------+-------+--------+ 
|      
 4 | Punit   |    75 | IT     | 
+---------+---------+-------+--------+ 
1 row in set (0.00 sec) 
XI. Write a function to display student having max marks 
mysql> select max(Marks) from student; 
+------------+ 
| max(Marks) | 
+------------+ 
|         
90 | 
+------------+ 
1 row in set (0.00 sec) 
mysql> select * from student where Marks=(select max(marks) from student); 
+---------+-----------+-------+----------+ 
| Roll_no | Name     
 | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
 1 | Shravani  |    90 | computer | 
+---------+-----------+-------+----------+ 
1 row in set (0.00 sec) 
XII.Write a function to display student having avg marks 
mysql> select avg(Marks) from student; 
+------------+ 
| avg(Marks) | 
+------------+ 
|    83.3333 | 
+------------+ 
1 row in set (0.00 sec) 
XIII. Write a function to display student sum of marks 
mysql> select sum(Marks) from student; 
+------------+ 
| sum(Marks) | 
+------------+ 
|        
250 | 
+------------+ 
1 row in set (0.00 sec) 
XIV. Write a function to count same branch 
mysql> select count(Branch) from student where Branch="Computer"; 
+---------------+ 
| count(Branch) | 
+---------------+ 
|             
1 | 
+---------------+ 
1 row in set (0.00 sec) 
mysql> select count(Branch) from student where Branch="AI"; 
+---------------+ 
| count(Branch) | 
+---------------+ 
|             
1 | 
+---------------+ 
1 row in set (0.01 sec) 
mysql> select count(Branch) from student where Branch="IT"; 
+---------------+ 
| count(Branch) | 
+---------------+ 
|             
1 | 
+---------------+ 
1 row in set (0.00 sec) 
XV. Display Minimum,Maximum,Average,Sum,Total count of each Branch 
mysql> select Branch,min(Marks) as Minimum,max(Marks) as Maximum,avg(Marks) as Average from 
student group by Branch; 
+----------+---------+---------+---------+ 
| Branch   | Minimum | Maximum | Average | 
+----------+---------+---------+---------+ 
| AI       
|      85 |      85 | 85.0000 | 
| computer |     
| IT      
 |     
 75 |      
 90 |      
90 | 90.0000 | 
75 | 75.0000 | 
+----------+---------+---------+---------+ 
3 rows in set (0.00 sec) 
mysql> alter table student change column Name Stud_Name varchar(20); 
Query OK, 0 rows affected (0.09 sec) 
Records: 0  Duplicates: 0  Warnings: 0 
mysql> select * from student; 
+---------+-----------+-------+----------+ 
| Roll_no | Stud_Name | Marks | Branch   | 
+---------+-----------+-------+----------+ 
|      
|      
|      
 1 | Shravani  |    90 | computer | 
 3 | Liya     
 4 | Punit    
 |   
 |    
 85 | AI      
75 | IT      
 | 
 | 
+---------+-----------+-------+----------+ 
3 rows in set (0.00 sec)
